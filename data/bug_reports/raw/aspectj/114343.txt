[generics] field-get problems when generic field is used.
Hi guys!

I've downloaded DEVELOPMENT-20051029200407.

There is some issue that I think is still open.
Take a look at the example:

Java Code:
----------

public class Test1 {

	Set<Integer> intsSet;

	public Set<Integer> foo() {
		return intsSet;
	}
}

public class Test2 {

	Set<Double> dSet;

	public Set<Double> foo() {
		return dSet;
	}
}

Aspect:
-------

public privileged aspect TestAspect {

    pointcut gettingMemberCollection(Test t) :
                target(t) &&
                get(!public Set<Number+> com.*.*) &&
                !within(TestAspect);

    Set around(Test t) : gettingMemberCollection(t)  {
        Set s =  proceed(t);
        return s;
    }
}

As you can see, I would like to replace access to member Set of something which 
derives from Number. But the problem is that around advice is stricted to 
return exact type of the member, and I'm getting the same error as earlier.

incompatible return type applying to field-get(java.util.Set 
com.mprv.secsph.Test.intsSet)

incompatible return type applying to field-get(java.util.Set 
com.mprv.secsph.Test.dSet)

In the M2 I just declared the advice this way and it worked fine.

May be now, you should allow to declare the advice this way:

    Set<? extends Number> around(Test t) : gettingMemberCollection(t) {
        Set s = proceed(t);
        return s;
    }

Thanks!
Misha.
